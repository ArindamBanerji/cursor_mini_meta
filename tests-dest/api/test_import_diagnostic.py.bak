"""
Test to diagnose get_iso_timestamp import path.
"""

import pytest
import sys
import os
from importlib import util
from services.monitor_health import MonitorHealth
from services.monitor_core import MonitorCore

def print_module_info(name):
    """Print information about where a module is loaded from."""
    if name in sys.modules:
        module = sys.modules[name]
        print(f"\nModule {name}:")
        print(f"  Location: {getattr(module, '__file__', 'Unknown')}")
        print(f"  Package: {getattr(module, '__package__', 'Unknown')}")
        print(f"  Path: {getattr(module, '__path__', 'Unknown')}")
        return True
    return False

def test_trace_imports():
    """Trace the import path of get_iso_timestamp."""
    print("\nTracing imports for get_iso_timestamp...")
    
    # Print relevant modules
    modules_to_check = [
        'services',
        'services.monitor_health',
        'services.monitor_health_helpers',
    ]
    
    for module_name in modules_to_check:
        if print_module_info(module_name):
            spec = util.find_spec(module_name)
            if spec:
                print(f"  Spec location: {spec.origin}")
                if spec.submodule_search_locations:
                    print(f"  Search locations: {spec.submodule_search_locations}")
    
    # Try to import and trace get_iso_timestamp
    print("\nAttempting to import get_iso_timestamp...")
    try:
        from services.monitor_health_helpers import get_iso_timestamp
        print("Successfully imported get_iso_timestamp")
        print(f"Function location: {get_iso_timestamp.__module__}")
    except ImportError as e:
        print(f"Import error: {str(e)}")
        
    # Check the actual MonitorHealth class usage
    print("\nChecking MonitorHealth class usage...")
    monitor_core = MonitorCore()
    monitor_health = MonitorHealth(monitor_core)
    
    try:
        timestamp = monitor_health._get_iso_timestamp()
        print(f"Successfully called _get_iso_timestamp: {timestamp}")
    except Exception as e:
        print(f"Error calling _get_iso_timestamp: {str(e)}")
        import traceback
        traceback.print_exc()
    
    # Print Python path
    print("\nPython path:")
    for path in sys.path:
        print(f"  {path}") 