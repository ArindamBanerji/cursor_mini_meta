"""
Diagnostic tests for controller functionality.

This file tests our dependency unwrapping approach with a basic controller,
focusing on core functionality like request handling and response formatting.
"""

import os
import sys
import logging
from pathlib import Path
import pytest
from unittest.mock import MagicMock, AsyncMock, patch
from fastapi.testclient import TestClient
from test_import_helper import setup_test_paths, setup_test_env_vars

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Set up paths
project_root = setup_test_paths()

# Additional imports for controller testing
import json
from fastapi import FastAPI, Request, Depends, HTTPException
from fastapi.responses import JSONResponse
from controllers.monitor_controller import (
    api_health_check,
    api_get_metrics,
    get_safe_client_host
)
from services import get_monitor_service

@pytest.fixture(autouse=True)
def setup_test_env(monkeypatch):
    """Set up test environment for each test."""
    setup_test_env_vars(monkeypatch)
    logger.info("Test environment initialized")
    yield
    logger.info("Test environment cleaned up")

@pytest.fixture
def test_app():
    """Create a test FastAPI application."""
    app = FastAPI()
    
    @app.get("/test")
    async def test_endpoint():
        return {"message": "Test endpoint"}
    
    return app

@pytest.fixture
def test_client(test_app):
    """Create a test client."""
    return TestClient(test_app)

@pytest.fixture
def mock_request():
    """Create a mock request object."""
    request = MagicMock(spec=Request)
    request.client = MagicMock()
    request.client.host = "127.0.0.1"
    request.query_params = {}
    return request

def test_get_safe_client_host(mock_request):
    """Test the get_safe_client_host function."""
    # Test with TEST_ENV=True (this takes precedence)
    host = get_safe_client_host(mock_request)
    assert host == 'test-client'  # Should return test-client in test environment
    
    # Test with TEST_ENV=False
    with patch.dict(os.environ, {'TEST_ENV': 'False'}):
        host = get_safe_client_host(mock_request)
        assert host == '127.0.0.1'  # Should return actual client host
        
        # Test with no client
        mock_request.client = None
        host = get_safe_client_host(mock_request)
        assert host == 'unknown'

@pytest.mark.asyncio
async def test_health_check_endpoint(mock_request):
    """Test the health check endpoint."""
    # Mock the monitor service with a proper dictionary return value
    mock_monitor = MagicMock()
    health_data = {
        "status": "healthy",
        "components": {
            "database": {
                "status": "healthy",
                "message": "Connected"
            },
            "api": {
                "status": "healthy",
                "message": "Running"
            }
        }
    }
    mock_monitor.check_system_health = MagicMock(return_value=health_data)
    
    # Test the endpoint
    response = await api_health_check(mock_request, mock_monitor)
    
    assert isinstance(response, JSONResponse)
    assert response.status_code == 200
    data = json.loads(response.body)
    assert data["status"] == "healthy"
    assert "components" in data
    assert data["components"]["database"]["status"] == "healthy"
    assert data["components"]["api"]["status"] == "healthy"

@pytest.mark.asyncio
async def test_metrics_endpoint(mock_request):
    """Test the metrics endpoint."""
    # Test the endpoint
    response = await api_get_metrics(mock_request)
    
    assert isinstance(response, JSONResponse)
    assert response.status_code == 200
    data = json.loads(response.body)
    assert "data" in data
    assert "success" in data
    assert data["success"] is True
    assert "message" in data
    assert isinstance(data["data"], dict)
    assert "count" in data["data"]
    assert "time_period_hours" in data["data"]

def test_endpoint_dependency_injection(test_app, test_client):
    """Test dependency injection in endpoints."""
    # Define a test dependency
    async def get_current_user():
        return {"username": "testuser"}
    
    @test_app.get("/protected")
    async def protected_endpoint(current_user: dict = Depends(get_current_user)):
        return current_user
    
    # Test the endpoint
    response = test_client.get("/protected")
    assert response.status_code == 200
    assert response.json() == {"username": "testuser"}

def test_error_handling(test_app, test_client):
    """Test error handling in endpoints."""
    @test_app.get("/error")
    async def error_endpoint():
        raise HTTPException(status_code=400, detail="Test error")
    
    # Test the endpoint
    response = test_client.get("/error")
    assert response.status_code == 400
    assert response.json()["detail"] == "Test error"

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 