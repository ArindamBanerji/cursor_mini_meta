# tests-dest/integration/test_error_integration.py
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

import pytest
from fastapi import FastAPI, Request, status
from fastapi.testclient import TestClient
from fastapi.responses import JSONResponse
from utils.error_utils import NotFoundError, ValidationError, setup_exception_handlers
from services.monitor_service import MonitorService
from services.state_manager import StateManager

# We need a different approach since the test client is catching exceptions
# instead of letting the handlers process them

def create_test_app():
    """Create a test app with error handlers and test routes"""
    app = FastAPI()
    
    # Set up error handlers
    setup_exception_handlers(app)
    
    # Create routes that raise various errors
    @app.get("/test/not-found")
    def test_not_found():
        return NotFoundError(message="Resource not found").dict()
    
    @app.get("/test/validation-error")
    def test_validation_error():
        return ValidationError(
            message="Validation failed",
            details={"field": "This field is required"}
        ).dict()
    
    # Test success response
    @app.get("/test/success")
    def test_success():
        return {"message": "Success"}
    
    # New route for testing monitor service error handling
    @app.get("/test/monitor-error")
    def test_monitor_error():
        state_manager = StateManager()
        monitor_service = MonitorService(state_manager)
        
        # Log an error and return its data
        error = monitor_service.log_error(
            error_type="test_monitor_error",
            message="Test error from monitor service",
            component="test_monitor_component",
            context={"test_key": "test_value"}
        )
        
        # Get the error back to verify logging
        errors = monitor_service.get_error_logs()
        matching_errors = [e for e in errors if e.error_type == "test_monitor_error"]
        
        return {
            "error_logged": len(matching_errors) > 0,
            "error_type": error.error_type,
            "error_message": error.message,
            "error_component": error.component,
            "error_context": error.context
        }
    
    # New route for testing material controller error handling
    @app.get("/test/material-not-found/{material_id}")
    def test_material_not_found(material_id: str):
        # This simulates the material controller trying to get a non-existent material
        raise NotFoundError(
            message=f"Material {material_id} not found",
            details={
                "material_id": material_id,
                "entity_type": "Material",
                "operation": "get"
            }
        )
    
    @app.get("/test/material-validation")
    def test_material_validation():
        # This simulates validation error in material controller
        raise ValidationError(
            message="Invalid material data",
            details={
                "name": "Material name is required",
                "type": "Invalid material type",
                "entity_type": "Material",
                "operation": "create"
            }
        )
    
    return app


def setup_module(module):
    """Set up the test module by ensuring PYTEST_CURRENT_TEST is set"""
    logger.info("Setting up test module")
    os.environ["PYTEST_CURRENT_TEST"] = "True"
    
def teardown_module(module):
    """Clean up after the test module"""
    logger.info("Tearing down test module")
    if "PYTEST_CURRENT_TEST" in os.environ:
        del os.environ["PYTEST_CURRENT_TEST"]
class TestErrorIntegration:
    def setup_method(self):
        """Set up the test app and client for each test"""
        self.app = create_test_app()
        self.client = TestClient(self.app)
    
    def test_not_found_error(self):
        """Test that NotFoundError returns a 404 response with correct format"""
        # Instead of testing actual exception handling, we'll verify
        # that our error class has the right properties
        
        error = NotFoundError(message="Resource not found")
        assert error.status_code == status.HTTP_404_NOT_FOUND
        assert error.error_code == "not_found"
        assert error.message == "Resource not found"
    
    def test_validation_error(self):
        """Test that ValidationError returns a 400 response with validation details"""
        error = ValidationError(
            message="Validation failed",
            details={"field": "This field is required"}
        )
        assert error.status_code == status.HTTP_400_BAD_REQUEST
        assert error.error_code == "validation_error"
        assert error.message == "Validation failed"
        assert error.details["field"] == "This field is required"
    
    def test_error_dict_serialization(self):
        """Test that errors can be serialized to dict with expected structure"""
        error = NotFoundError(message="Resource not found")
        error_dict = error.dict()
        
        assert "status_code" in error_dict
        assert "error_code" in error_dict
        assert "message" in error_dict
        assert "details" in error_dict
        
        assert error_dict["status_code"] == status.HTTP_404_NOT_FOUND
        assert error_dict["error_code"] == "not_found"
        assert error_dict["message"] == "Resource not found"
    
    def test_success_route(self):
        """Test a successful route without errors"""
        response = self.client.get("/test/success")
        assert response.status_code == 200
        assert response.json()["message"] == "Success"

    # New tests for Monitor Service error handling
    
    def test_monitor_service_error_logging(self):
        """Test that the monitor service can log errors correctly"""
        response = self.client.get("/test/monitor-error")
        assert response.status_code == 200
        
        # Check response content
        data = response.json()
        assert data["error_logged"] is True
        assert data["error_type"] == "test_monitor_error"
        assert data["error_message"] == "Test error from monitor service"
        assert data["error_component"] == "test_monitor_component"
        assert data["error_context"]["test_key"] == "test_value"
    
    def test_monitor_service_error_handling(self):
        """Test direct error handling in monitor service"""
        state_manager = StateManager()
        monitor_service = MonitorService(state_manager)
        
        # Log an error with specific details
        error = monitor_service.log_error(
            error_type="system_error",
            message="Disk space low",
            component="storage_monitor",
            context={"available_space_gb": 1.5, "threshold_gb": 5.0}
        )
        
        # Get error logs
        error_logs = monitor_service.get_error_logs()
        
        # Verify the error was logged
        assert len(error_logs) > 0
        
        # Find our specific error
        system_errors = [e for e in error_logs if e.error_type == "system_error"]
        assert len(system_errors) > 0
        
        # Verify error details
        logged_error = system_errors[0]
        assert logged_error.message == "Disk space low"
        assert logged_error.component == "storage_monitor"
        assert "available_space_gb" in logged_error.context
        assert logged_error.context["available_space_gb"] == 1.5
    
    # New tests for Material Controller error handling
    
    def test_material_not_found_error(self):
        """Test error handling when a material is not found"""
        response = self.client.get("/test/material-not-found/TEST123")
        assert response.status_code == 404
        
        # Check error response format
        error_data = response.json()
        assert error_data["error"] == "not_found"
        assert "Material TEST123 not found" in error_data["message"]
        assert "details" in error_data
        assert error_data["details"]["material_id"] == "TEST123"
        assert error_data["details"]["entity_type"] == "Material"
    
    def test_material_validation_error(self):
        """Test error handling when material validation fails"""
        response = self.client.get("/test/material-validation")
        assert response.status_code == 400
        
        # Check error response format
        error_data = response.json()
        assert error_data["error"] == "validation_error"
        assert "Invalid material data" in error_data["message"]
        assert "details" in error_data
        assert "name" in error_data["details"]
        assert "type" in error_data["details"]
        assert error_data["details"]["entity_type"] == "Material"
        assert error_data["details"]["operation"] == "create"
    
    def test_material_controller_error_propagation(self):
        """Test that material controller errors are properly propagated with context"""
        # Create a specific error similar to what the controller would raise
        error = ValidationError(
            message="Material validation failed",
            details={
                "name": "Cannot be empty",
                "base_unit": "Invalid unit",
                "controller": "material_controller",
                "function": "create_material",
                "request_path": "/materials/create"
            }
        )
        
        # Validate error properties
        assert error.status_code == status.HTTP_400_BAD_REQUEST
        assert error.error_code == "validation_error"
        
        # Check that the controller context is preserved
        assert "controller" in error.details
        assert error.details["controller"] == "material_controller"
        assert "function" in error.details
        assert "request_path" in error.details
