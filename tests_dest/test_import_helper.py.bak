"""
Test helper for setting up import paths for tests.
"""
import os
import sys
import logging
import pytest
from pathlib import Path
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

def find_project_root() -> str:
    """Find the project root directory."""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    # Go up one level from tests-dest to find the project root
    return os.path.dirname(current_dir)

def setup_test_paths() -> str:
    """Set up Python path for tests.
    
    Returns:
        The project root path
    """
    project_root = find_project_root()
    if project_root not in sys.path:
        sys.path.insert(0, project_root)
    
    # Also ensure test dir is in path
    test_dir = os.path.dirname(os.path.abspath(__file__))
    if test_dir not in sys.path:
        sys.path.insert(0, test_dir)
        
    logger.info(f"Set up paths: project_root={project_root}, test_dir={test_dir}")
    return project_root

def setup_test_env_vars(monkeypatch: pytest.MonkeyPatch) -> str:
    """Set up environment variables for tests.
    
    Returns:
        The project root path
    """
    project_root = find_project_root()
    env_vars: Dict[str, str] = {
        "PROJECT_ROOT": project_root,
        "SAP_HARNESS_HOME": project_root,
        "SAP_HARNESS_CONFIG": os.path.join(project_root, "config"),
        "TEST_MODE": "true"
    }
    
    # Set environment variables using monkeypatch
    for key, value in env_vars.items():
        monkeypatch.setenv(key, value)
    
    # Handle PYTEST_CURRENT_TEST specially
    if "PYTEST_CURRENT_TEST" not in os.environ:
        monkeypatch.setenv("PYTEST_CURRENT_TEST", "test_setup")
    
    logger.info(f"Set environment variables: {env_vars}")
    return project_root

@pytest.fixture(autouse=True)
def setup_test_env(monkeypatch: pytest.MonkeyPatch, request: pytest.FixtureRequest) -> None:
    """Set up test environment."""
    # Setup paths first
    project_root = setup_test_paths()
    
    # Then setup environment variables
    setup_test_env_vars(monkeypatch)
    
    # Set PYTEST_CURRENT_TEST for the current test
    test_name = request.node.name if request.node else "unknown_test"
    monkeypatch.setenv("PYTEST_CURRENT_TEST", f"{test_name} (setup)")
    
    logger.info(f"Test environment initialized for {test_name}")
    
    # Yield for test execution
    yield
    
    # Update PYTEST_CURRENT_TEST for teardown
    try:
        # At teardown, first check if it exists
        if "PYTEST_CURRENT_TEST" in os.environ:
            monkeypatch.setenv("PYTEST_CURRENT_TEST", f"{test_name} (teardown)")
        else:
            # If it doesn't exist, create it to avoid errors
            monkeypatch.setenv("PYTEST_CURRENT_TEST", "test_teardown")
    except Exception as e:
        logger.warning(f"Error handling PYTEST_CURRENT_TEST: {e}")
    
    logger.info(f"Test environment cleaned up for {test_name}") 